<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
  <xs:include schemaLocation="types_file.xsd"/>
  <xs:element name="data">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="Data">
          <xs:assert test="count(/data/LIST_OF_COM)  = 1 or count(/data/LIST_OF_PROP) = 1"/>
          <xs:assert test="count(/data/LIST_OF_ACC)  = 0"/>
          <xs:assert test="count(//COM)   >= 0"/>
          <xs:assert test="count(//PROP)  >= 0"/>
          <xs:assert test="count(//BUILD) >= 0"/>
          <xs:assert test="count(//LEASE) >= 0"/>
          <xs:assert test="count(//TERM)  >= 0"/>
          <xs:assert test="count(//UNIT)  >= 0"/>
          <xs:assert test="count(//ACC)   >= 0"/>
          <xs:assert test="count(//BOOK)  >= 0"/>
          <xs:assert test="count(//REC)   >= 0"/>
          <xs:assert test="count(//LAND)  = 0"/>
          <xs:assert test="count(//LOAN)  = 0"/>
          <xs:assert test="count(//PROJ)  = 0"/>
          <xs:assert test="count(//CON)  = 0"/>
          <xs:assert test="count(//VAL)   = 0"/>
          <xs:assert test="count(//ACC[@objectIdSender]) = count(//ACC)"/>
          <xs:assert test="count(//ACC[value]) = count(//ACC)"/>
          <xs:assert test="count(//ACC[balancePosition]) = count(//ACC)"/>
          <xs:assert test="count(//ACC[accountingStandard]) = count(//ACC)"/>
          <xs:assert test="count(//BOOK[@objectIdSender]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[balancePosition]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[text]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[transactionType]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[accountingStandard]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[currency]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[netValue]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[grossValue]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[vatValue]) = count(//BOOK)"/>
          <xs:assert test="count(//BOOK[vat]) = count(//BOOK)"/>
          <xs:assert test="count(//REC[@objectIdSender]) = count(//REC)"/>
          <xs:assert test="count(//REC[date]) = count(//REC)"/>
          <xs:assert test="count(//REC[text]) = count(//REC)"/>
          <xs:assert test="count(//REC[category]) = count(//REC)"/>
          <xs:assert test="count(//REC[grossValue]) = count(//REC)"/>
          <xs:assert test="count(//REC[vatValue]) = count(//REC)"/>
          <xs:assert test="count(//REC[vat]) = count(//REC)"/>
          <xs:assert test="count(//REC[netValue]) = count(//REC)"/>
          <xs:assert test="count(//REC[status]) = count(//REC)"/>
          <xs:assert test="count(//REC[paymentPeriod]) = count(//REC)"/>
          <xs:assert test="count(//REC[accountingStandard]) = count(//REC)"/>
          <xs:assert test="count(//COM[@objectIdSender]) = count(//COM)"/>
          <xs:assert test="count(//COM[@validFrom]) = count(//COM)"/>
          <xs:assert test="count(//COM[currency]) = count(//COM)"/>
          <xs:assert test="count(//PROP[@objectIdSender]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[@validFrom]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[archValidFrom]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[archValidTo]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[areaType]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[areaMeasurement]) = count(//PROP)"/>
          <xs:assert test="count(//PROP/address[housenumber]) = count(//PROP)"/>
          <xs:assert test="count(//PROP/address[zip]) = count(//PROP)"/>
          <xs:assert test="count(//PROP/address[city]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[currency]) = count(//PROP)"/>
          <xs:assert test="count(//PROP[heatingType]) = 0"/>
          <xs:assert test="count(//PROP[assetAccountType]) = 0"/>
          <xs:assert test="count(//PROP[numberOfBathrooms]) = 0"/>
          <xs:assert test="count(//PROP[numberOfCanteen]) = 0"/>
          <xs:assert test="count(//PROP[ownershipType]) = 0"/>
          <xs:assert test="count(//PROP[elevator]) = 0"/>
          <xs:assert test="count(//PROP[interiorQuality]) = 0"/>
          <xs:assert test="count(//PROP[balcony]) = 0"/>
          <xs:assert test="count(//PROP[barrierfree]) = 0"/>
          <xs:assert test="count(//PROP[saleGrossPrice]) = 0"/>
          <xs:assert test="count(//PROP[assetValue]) = 0"/>
          <xs:assert test="count(//PROP[lanCables]) = 0"/>
          <xs:assert test="count(//PROP[ownerOccupation]) = 0"/>
          <xs:assert test="count(//PROP/energyRating[energyEfficiencyClass]) = 0"/>
          <xs:assert test="count(//PROP[distanceToRailStation]) = 0"/>
          <xs:assert test="count(//PROP[distanceToAirport]) = 0"/>
          <xs:assert test="count(//PROP[distanceToPublicTransport]) = 0"/>
          <xs:assert test="count(//PROP[distanceToHighway]) = 0"/>
          <xs:assert test="count(//PROP[groundRent]) = 0"/>
          <xs:assert test="count(//PROP[titleOfExposee]) = 0"/>
          <xs:assert test="count(//PROP[totalGrossCosts]) = 0"/>
          <xs:assert test="count(//PROP[totalNetCosts]) = 0"/>
          <xs:assert test="count(//PROP[totalApportionableCosts]) = 0"/>
          <xs:assert test="count(//PROP[purchaseTransferTax]) = 0"/>
          <xs:assert test="count(//PROP[saleTransferTax]) = 0"/>
          <xs:assert test="count(//PROP[useTypePrimary]) = 0"/>
          <xs:assert test="count(//PROP[ipdObjectId]) = 0"/>
          <xs:assert test="count(//PROP[ipdPortfolioId]) = 0"/>
          <xs:assert test="count(//PROP[retailLocation]) = 0"/>
          <xs:assert test="count(//PROP[maintenanceCosts]) = 0"/>
          <xs:assert test="count(//PROP[capitalIncome]) = 0"/>
          <xs:assert test="count(//PROP[cellar]) = 0"/>
          <xs:assert test="count(//PROP[airconditioning]) = 0"/>
          <xs:assert test="count(//PROP[locationClassificationType]) = 0"/>
          <xs:assert test="count(//PROP[vacancyOperatingCosts]) = 0"/>
          <xs:assert test="count(//PROP[purchaseBrokerage]) = 0"/>
          <xs:assert test="count(//PROP[saleBrokerage]) = 0"/>
          <xs:assert test="count(//PROP[marketRentalValue]) = 0"/>
          <xs:assert test="count(//PROP[useTypeSecondary]) = 0"/>
          <xs:assert test="count(//PROP[netIncome]) = 0"/>
          <xs:assert test="count(//PROP[rentalIncomeMain]) = 0"/>
          <xs:assert test="count(//PROP[purchaseNetPrice]) = 0"/>
          <xs:assert test="count(//PROP[saleNetPrice]) = 0"/>
          <xs:assert test="count(//PROP[protfolioType]) = 0"/>
          <xs:assert test="count(//PROP[courtage]) = 0"/>
          <xs:assert test="count(//PROP[purchaseLegalFees]) = 0"/>
          <xs:assert test="count(//PROP[riskStyle]) = 0"/>
          <xs:assert test="count(//PROP[purchaseAdditionalCosts]) = 0"/>
          <xs:assert test="count(//PROP[otherCosts]) = 0"/>
          <xs:assert test="count(//PROP[rentalIncomeAdditional]) = 0"/>
          <xs:assert test="count(//PROP[saleAdditionalCosts]) = 0"/>
          <xs:assert test="count(//PROP[partialPurchase]) = 0"/>
          <xs:assert test="count(//PROP[partialSales]) = 0"/>
          <xs:assert test="count(//PROP[saleDate]) = 0"/>
          <xs:assert test="count(//PROP[fairValue]) = 0"/>
          <xs:assert test="count(//PROP[rented]) = 0"/>
          <xs:assert test="count(//PROP[leasedArea]) = 0"/>
          <xs:assert test="count(//PROP[assetCategory]) = 0"/>
          <xs:assert test="count(//PROP[administrationCosts]) = 0"/>
          <xs:assert test="count(//PROP[valueIncreasingReconstructCosts]) = 0"/>
          <xs:assert test="count(//PROP/address[isPublic]) = 0"/>
          <xs:assert test="count(//BUILD[@objectIdSender]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD[@validFrom]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD[archValidFrom]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD[archValidTo]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD[areaType]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD[areaMeasurement]) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD/address) = count(//BUILD)"/>
          <xs:assert test="count(//BUILD/address[housenumber]) = count(//BUILD/address)"/>
          <xs:assert test="count(//BUILD/address[zip]) = count(//BUILD/address)"/>
          <xs:assert test="count(//BUILD/address[city]) = count(//BUILD/address)"/>
          <xs:assert test="count(//BUILD/address[isPublic]) = 0"/>
          <xs:assert test="count(//BUILD[assetAccountType]) = 0"/>
          <xs:assert test="count(//BUILD[numberOfBathrooms]) = 0"/>
          <xs:assert test="count(//BUILD[numberOfBedrooms]) = 0"/>
          <xs:assert test="count(//BUILD[numberOfCanteen]) = 0"/>
          <xs:assert test="count(//BUILD[elevator]) = 0"/>
          <xs:assert test="count(//BUILD[interiorQuality]) = 0"/>
          <xs:assert test="count(//BUILD[balcony]) = 0"/>
          <xs:assert test="count(//BUILD[barrierfree]) = 0"/>
          <xs:assert test="count(//BUILD[energySource]) = 0"/>
          <xs:assert test="count(//BUILD[saleGrossPrice]) = 0"/>
          <xs:assert test="count(//BUILD[lanCables]) = 0"/>
          <xs:assert test="count(//BUILD[floorload]) = 0"/>
          <xs:assert test="count(//BUILD[ownerOccupation]) = 0"/>
          <xs:assert test="count(//BUILD/energyRating[energyEfficiencyClass]) = 0"/>
          <xs:assert test="count(//BUILD[guestToilet]) = 0"/>
          <xs:assert test="count(//BUILD[useTypePrimary]) = 0"/>
          <xs:assert test="count(//BUILD[airconditioning]) = 0"/>
          <xs:assert test="count(//BUILD[useTypeSecondary]) = 0"/>
          <xs:assert test="count(//BUILD[courtage]) = 0"/>
          <xs:assert test="count(//BUILD[ramp]) = 0"/>
          <xs:assert test="count(//BUILD[riskStyle]) = 0"/>
          <xs:assert test="count(//BUILD[highVoltage]) = 0"/>
          <xs:assert test="count(//BUILD[rented]) = 0"/>
          <xs:assert test="count(//BUILD[economicConstructionDate]) = 0"/>
          <xs:assert test="count(//UNIT[@objectIdSender]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[@validFrom]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[archValidFrom]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[archValidTo]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[areaType]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[areaMeasurement]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[endPriceMaintenance]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[useType]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[lettableUnits]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[lettableArea]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
          <xs:assert test="count(//UNIT[summerResidencePractical]) = 0"/>
          <xs:assert test="count(//UNIT[numberOfBathrooms]) = 0"/>
          <xs:assert test="count(//UNIT[numberOfBedrooms]) = 0"/>
          <xs:assert test="count(//UNIT[interiorQuality]) = 0"/>
          <xs:assert test="count(//UNIT[balcony]) = 0"/>
          <xs:assert test="count(//UNIT[barrierfree]) = 0"/>
          <xs:assert test="count(//UNIT[lanCables]) = 0"/>
          <xs:assert test="count(//UNIT[hasBuiltinKitchen]) = 0"/>
          <xs:assert test="count(//UNIT[isLodgerFlat]) = 0"/>
          <xs:assert test="count(//UNIT/energyRating[date]) = 0"/>
          <xs:assert test="count(//UNIT/energyRating[energyEfficiencyClass]) = 0"/>
          <xs:assert test="count(//UNIT/energyRating[energyConsumption]) = 0"/>
          <xs:assert test="count(//UNIT[titleOfExposee]) = 0"/>
          <xs:assert test="count(//UNIT[garden]) = 0"/>
          <xs:assert test="count(//UNIT[guestToilet]) = 0"/>
          <xs:assert test="count(//UNIT[hallHeight]) = 0"/>
          <xs:assert test="count(//UNIT[autoLift]) = 0"/>
          <xs:assert test="count(//UNIT[maxNumberOfPerson]) = 0"/>
          <xs:assert test="count(//UNIT[hasFurniture]) = 0"/>
          <xs:assert test="count(//UNIT[nonSmoker]) = 0"/>
          <xs:assert test="count(//UNIT[parkingSpaceType]) = 0"/>
          <xs:assert test="count(//UNIT[courtage]) = 0"/>
          <xs:assert test="count(//UNIT[minimumDivisible]) = 0"/>
          <xs:assert test="count(//UNIT[certificateOfEligibility]) = 0"/>
          <xs:assert test="count(//UNIT[apartmentType]) = 0"/>
          <xs:assert test="count(//LEASE[@objectIdSender]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[@validFrom]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[badDebt]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[beginRentPayment]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[payment]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[operatingCostPrepayment]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[debitor]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[debitorId]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[depositAgreed]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[depositType]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[depositAmount]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[depositPayed]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[terminationDuration]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[dunningIndicator]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[dunningLevel]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[leaseBeginDate]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[minRentalTime]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[option]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[openItems]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[breakOption]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[contractCompletionDate]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[dmiendOption]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[currency]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[paymentPattern]) = count(//LEASE)"/>
          <xs:assert test="count(//LEASE[freeFrom]) = 0"/>
          <xs:assert test="count(//LEASE[terminated]) = 0"/>
          <xs:assert test="count(//LEASE[petsAllowed]) = 0"/>
          <xs:assert test="count(//LEASE[tenancy]) = 0"/>
          <xs:assert test="count(//LEASE[heatingCosts]) = 0"/>
          <xs:assert test="count(//LEASE[maxNumberOfPerson]) = 0"/>
          <xs:assert test="count(//LEASE[maxRentalTime]) = 0"/>
          <xs:assert test="count(//LEASE[parkingSpaceCosts]) = 0"/>
          <xs:assert test="count(//LEASE[courtage]) = 0"/>
          <xs:assert test="count(//TERM[@objectIdSender]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[@validFrom]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[deltaGraduatedRent]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentIncreaseType]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentAdjustmentDelay]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[baseIndex]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexBaseYear]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexAdjustmentBegin]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[graduateRentBegin]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[payment]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[lastRentAdjustmentDate]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentAdjustmentDate]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[terminationReceiptDate]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[incomeLoss]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexModificationMethod]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexAdjustmentDirection]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexRow]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[depositAgreed]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[depositType]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[depositAmount]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[depositPayed]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[conditionAmount]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[terminationDuration]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexCountry]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexAdjustmentValueType]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentAdjustmentFrequence]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentIncreasePercentage]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[rentConcession]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexMinimumAdjustmentInPercent]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexMinimumAdjustmentInPoints]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[optRate]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[breakOption]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[contractCompletionDate]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[dmiendOption]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[leasedArea]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[indexPassthrough]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[currency]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[conditionType]) = count(//TERM)"/>
          <xs:assert test="count(//TERM[depositIncreaseType]) = 0"/>
          <xs:assert test="count(//TERM[turnoverAdjType]) = 0"/>
          <xs:assert test="count(//TERM[turnoverRent]) = 0"/>
          <xs:assert test="count(//TERM[turnoverRentCap]) = 0"/>
          <xs:assert test="count(//TERM[turnoverSortiment]) = 0"/>
          <xs:assert test="count(//TERM[turnoverMinimum]) = 0"/>
          <xs:assert test="count(//TERM[turnoverReportingInterval]) = 0"/>
          <xs:assert test="count(//TERM[turnoverCertificate]) = 0"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
</xs:schema>
