<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="types_file.xsd"/>
	<xs:element name="data">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Data">
		            <xs:assert test="count(/data/Properties) = 1" />
		            <xs:assert test="count(/data/Accounts)  = 0" />
		            <xs:assert test="count(/data/Companies)  = 0" />
		            
					<xs:assert test="count(//Valuation)   >= count(//Property)"/>
					<xs:assert test="count(//Property)  >= 0"/>
					<xs:assert test="count(//Building) >= 0"/>
					<xs:assert test="count(//Lease) >= 0"/>
					<xs:assert test="count(//Unit)  >= 0"/>
					<xs:assert test="count(//Valuation)   >= 0"/>
					<xs:assert test="count(//Account)   = 0"/>
					<xs:assert test="count(//BookEntry)  = 0"/>
					<xs:assert test="count(//Company)   = 0"/>
					<xs:assert test="count(//Land)  = 0"/>
					<xs:assert test="count(//Project)  = 0"/>
					<xs:assert test="count(//Record)   = 0"/>
					<xs:assert test="count(//ServiceContract)  = 0"/>
					<xs:assert test="count(//Term)  = 0"/>
					<xs:assert test="count(//Property[@objectIdSender]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseDate]) = count(//Property)"/>
					<xs:assert test="count(//Property[numberOfRooms]) = count(//Property)"/>
					<xs:assert test="count(//Property[ownershipType]) = count(//Property)"/>
					<xs:assert test="count(//Property[operatingCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseGrossPrice]) = count(//Property)"/>
					<xs:assert test="count(//Property[assetValue]) = count(//Property)"/>
					<xs:assert test="count(//Property[constructionDate]) = count(//Property)"/>
					<xs:assert test="count(//Property[monumentProtectionCategory]) = count(//Property)"/>
					<xs:assert test="count(//Property[ownerOccupation]) = count(//Property)"/>
					<xs:assert test="count(//Property[ownershipShare]) = count(//Property)"/>
					<xs:assert test="count(//Property[groundRent]) = count(//Property)"/>
					<xs:assert test="count(//Property[areaType]) = count(//Property)"/>
					<xs:assert test="count(//Property[areaMeasurement]) = count(//Property)"/>
					<xs:assert test="count(//Property[totalGrossCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[totalNetCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[totalApportionableCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseTransferTax]) = count(//Property)"/>
					<xs:assert test="count(//Property[saleTransferTax]) = count(//Property)"/>
					<xs:assert test="count(//Property[validFrom]) = count(//Property)"/>
					<xs:assert test="count(//Property[useTypePrimary]) = count(//Property)"/>
					<xs:assert test="count(//Property/address[housenumber]) = count(//Property)"/>
					<xs:assert test="count(//Property[ipdObjectId]) = count(//Property)"/>
					<xs:assert test="count(//Property[ipdPortfolioId]) = count(//Property)"/>
					<xs:assert test="count(//Property[retailLocation]) = count(//Property)"/>
					<xs:assert test="count(//Property[maintenanceCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[capitalIncome]) = count(//Property)"/>
					<xs:assert test="count(//Property[airconditioning]) = count(//Property)"/>
					<xs:assert test="count(//Property/address[country]) = count(//Property)"/>
					<xs:assert test="count(//Property[vacancyOperatingCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseBrokerage]) = count(//Property)"/>
					<xs:assert test="count(//Property[saleBrokerage]) = count(//Property)"/>
					<xs:assert test="count(//Property[marketRentalValue]) = count(//Property)"/>
					<xs:assert test="count(//Property[netIncome]) = count(//Property)"/>
					<xs:assert test="count(//Property[rentalIncomeMain]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseNetPrice]) = count(//Property)"/>
					<xs:assert test="count(//Property[protfolioType]) = count(//Property)"/>
					<xs:assert test="count(//Property[portfolioPartName]) = count(//Property)"/>
					<xs:assert test="count(//Property/address[zip]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseLegalFees]) = count(//Property)"/>
					<xs:assert test="count(//Property[purchaseAdditionalCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[otherCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[rentalIncomeAdditional]) = count(//Property)"/>
					<xs:assert test="count(//Property[saleAdditionalCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property/address[city]) = count(//Property)"/>
					<xs:assert test="count(//Property/address[street]) = count(//Property)"/>
					<xs:assert test="count(//Property[partialPurchase]) = count(//Property)"/>
					<xs:assert test="count(//Property[partialSales]) = count(//Property)"/>
					<xs:assert test="count(//Property[saleDate]) = count(//Property)"/>
					<xs:assert test="count(//Property[fairValue]) = count(//Property)"/>
					<xs:assert test="count(//Property[leasedArea]) = count(//Property)"/>
					<xs:assert test="count(//Property[administrationCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[valueIncreasingReconstructCosts]) = count(//Property)"/>
					<xs:assert test="count(//Property[currency]) = count(//Property)"/>
                    <xs:assert test="not(exists(//Property/purchaseGrossPrice)) or count(//Property) = count(//Property[purchaseGrossPrice = purchaseNetPrice - purchaseTransferTax - purchaseLegalFees - purchaseBrokerage - purchaseAdditionalCosts])"/>
                    <xs:assert test="not(exists(//Property/saleGrossPrice)) or count(//Property) = count(//Property[saleGrossPrice = saleNetPrice - saleTransferTax - saleBrokerage - saleAdditionalCosts])"/>
					<xs:assert test="count(//Property[operatingCostsSettled]) = 0"/>
					<xs:assert test="count(//Property[archValidFrom]) = 0"/>
					<xs:assert test="count(//Property[archValidTo]) = 0"/>
					<xs:assert test="count(//Property/address[isPublic]) = 0"/>
					<xs:assert test="count(//Property[assetAccountType]) = 0"/>
					<xs:assert test="count(//Property[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//Property[numberOfCanteen]) = 0"/>
					<xs:assert test="count(//Property[elevator]) = 0"/>
					<xs:assert test="count(//Property[interiorQuality]) = 0"/>
					<xs:assert test="count(//Property[balcony]) = 0"/>
					<xs:assert test="count(//Property[barrierfree]) = 0"/>
					<xs:assert test="count(//Property[lanCables]) = 0"/>
					<xs:assert test="count(//Property/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//Property[distanceToRailStation]) = 0"/>
					<xs:assert test="count(//Property[distanceToAirport]) = 0"/>
					<xs:assert test="count(//Property[distanceToPublicTransport]) = 0"/>
					<xs:assert test="count(//Property[distanceToHighway]) = 0"/>
					<xs:assert test="count(//Property[titleOfExposee]) = 0"/>
					<xs:assert test="count(//Property[facilityManager]) = 0"/>
					<xs:assert test="count(//Property/address[latitude]) = 0"/>
					<xs:assert test="count(//Property/address[longitude]) = 0"/>
					<xs:assert test="count(//Property[plotArea]) = 0"/>
					<xs:assert test="count(//Property[locationClassificationType]) = 0"/>
					<xs:assert test="count(//Property[note]) = 0"/>
					<xs:assert test="count(//Property[propertyManager]) = 0"/>
					<xs:assert test="count(//Property[courtage]) = 0"/>
					<xs:assert test="count(//Building[@objectIdSender]) = count(//Building)"/>
					<xs:assert test="count(//Building[purchaseDate]) = count(//Building)"/>
					<xs:assert test="count(//Building[numberOfParkingSpaces]) = count(//Building)"/>
					<xs:assert test="count(//Building[numberOfRooms]) = count(//Building)"/>
					<xs:assert test="count(//Building[constructionDate]) = count(//Building)"/>
					<xs:assert test="count(//Building[monumentProtectionCategory]) = count(//Building)"/>
					<xs:assert test="count(//Building[ownerOccupation]) = count(//Building)"/>
					<xs:assert test="count(//Building[ownershipShare]) = count(//Building)"/>
					<xs:assert test="count(//Building[areaType]) = count(//Building)"/>
					<xs:assert test="count(//Building[areaMeasurement]) = count(//Building)"/>
					<xs:assert test="count(//Building[validFrom]) = count(//Building)"/>
					<xs:assert test="count(//Building[useTypePrimary]) = count(//Building)"/>
					<xs:assert test="count(//Building/address[housenumber]) = count(//Building)"/>
					<xs:assert test="count(//Building[airconditioning]) = count(//Building)"/>
					<xs:assert test="count(//Building[usableArea]) = count(//Building)"/>
					<xs:assert test="count(//Building/address[zip]) = count(//Building)"/>
					<xs:assert test="count(//Building/address[city]) = count(//Building)"/>
					<xs:assert test="count(//Building/address[street]) = count(//Building)"/>
					<xs:assert test="count(//Building[economicConstructionDate]) = count(//Building)"/>
					<xs:assert test="count(//Building[archValidFrom]) = 0"/>
					<xs:assert test="count(//Building[archValidTo]) = 0"/>
					<xs:assert test="count(//Building/address[isPublic]) = 0"/>
					<xs:assert test="count(//Building[assetAccountType]) = 0"/>
					<xs:assert test="count(//Building[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//Building[numberOfBedrooms]) = 0"/>
					<xs:assert test="count(//Building[numberOfCanteen]) = 0"/>
					<xs:assert test="count(//Building[elevator]) = 0"/>
					<xs:assert test="count(//Building[interiorQuality]) = 0"/>
					<xs:assert test="count(//Building[balcony]) = 0"/>
					<xs:assert test="count(//Building[barrierfree]) = 0"/>
					<xs:assert test="count(//Building[energySource]) = 0"/>
					<xs:assert test="count(//Building[lanCables]) = 0"/>
					<xs:assert test="count(//Building[floorload]) = 0"/>
					<xs:assert test="count(//Building/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//Building[numberOfFloors]) = 0"/>
					<xs:assert test="count(//Building/address[latitude]) = 0"/>
					<xs:assert test="count(//Building/address[longitude]) = 0"/>
					<xs:assert test="count(//Building[guestToilet]) = 0"/>
					<xs:assert test="count(//Building[cubature]) = 0"/>
					<xs:assert test="count(//Building[propertyManager]) = 0"/>
					<xs:assert test="count(//Building[courtage]) = 0"/>
					<xs:assert test="count(//Building[ramp]) = 0"/>
					<xs:assert test="count(//Building[highVoltage]) = 0"/>
					<xs:assert test="count(//Unit[@objectIdSender]) = count(//Unit)"/>
					<xs:assert test="count(//Unit[numberOfParkingSpaces]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[numberOfRooms]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit/energyRating[date]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit/energyRating[energyConsumption]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[areaType]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[areaMeasurement]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[validFrom]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[useType]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[lettableArea]) = count(//Property/Units/Unit)"/>
					<xs:assert test="count(//Unit[archValidFrom]) = 0"/>
					<xs:assert test="count(//Unit[archValidTo]) = 0"/>
					<xs:assert test="count(//Unit[summerResidencePractical]) = 0"/>
					<xs:assert test="count(//Unit[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//Unit[numberOfBedrooms]) = 0"/>
					<xs:assert test="count(//Unit[interiorQuality]) = 0"/>
					<xs:assert test="count(//Unit[balcony]) = 0"/>
					<xs:assert test="count(//Unit[barrierfree]) = 0"/>
					<xs:assert test="count(//Unit[lanCables]) = 0"/>
					<xs:assert test="count(//Unit[hasBuiltinKitchen]) = 0"/>
					<xs:assert test="count(//Unit[isLodgerFlat]) = 0"/>
					<xs:assert test="count(//Unit/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//Unit[localReferenceRent]) = 0"/>
					<xs:assert test="count(//Unit/address[floor]) = 0"/>
					<xs:assert test="count(//Unit[titleOfExposee]) = 0"/>
					<xs:assert test="count(//Unit[garden]) = 0"/>
					<xs:assert test="count(//Unit[guestToilet]) = 0"/>
					<xs:assert test="count(//Unit[hallHeight]) = 0"/>
					<xs:assert test="count(//Unit[autoLift]) = 0"/>
					<xs:assert test="count(//Unit/address[floorLocation]) = 0"/>
					<xs:assert test="count(//Unit[vacancyReason]) = 0"/>
					<xs:assert test="count(//Unit[hasFurniture]) = 0"/>
					<xs:assert test="count(//Unit[nonSmoker]) = 0"/>
					<xs:assert test="count(//Unit[useTypeCustomer]) = 0"/>
					<xs:assert test="count(//Unit[propertyManager]) = 0"/>
					<xs:assert test="count(//Unit[courtage]) = 0"/>
					<xs:assert test="count(//Unit[certificateOfEligibility]) = 0"/>
					<xs:assert test="count(//Unit[apartmentType]) = 0"/>
					<xs:assert test="count(//Lease[@objectIdSender]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[payment]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[terminated]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[validFrom]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[leaseBeginDate]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[leaseEndDate]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[option]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[currency]) = count(//Lease)"/>
					<xs:assert test="count(//Lease[operatingCostsSettled]) = 0"/>
					<xs:assert test="count(//Lease[acceptedTerminationtDate]) = 0"/>
					<xs:assert test="count(//Lease[depositIncreaseType]) = 0"/>
					<xs:assert test="count(//Lease[badDebt]) = 0"/>
					<xs:assert test="count(//Lease[operatingCostPrepayment]) = 0"/>
					<xs:assert test="count(//Lease[freeFrom]) = 0"/>
					<xs:assert test="count(//Lease[terminationReceiptDate]) = 0"/>
					<xs:assert test="count(//Lease[debitor]) = 0"/>
					<xs:assert test="count(//Lease[debitorId]) = 0"/>
					<xs:assert test="count(//Lease[leaseContractType]) = 0"/>
					<xs:assert test="count(//Lease[petsAllowed]) = 0"/>
					<xs:assert test="count(//Lease[tenancy]) = 0"/>
					<xs:assert test="count(//Lease[heatingCosts]) = 0"/>
					<xs:assert test="count(//Lease[depositType]) = 0"/>
					<xs:assert test="count(//Lease[depositAmount]) = 0"/>
					<xs:assert test="count(//Lease[depositPayed]) = 0"/>
					<xs:assert test="count(//Lease[dunningIndicator]) = 0"/>
					<xs:assert test="count(//Lease[nation]) = 0"/>
					<xs:assert test="count(//Lease[parkingSpaceCosts]) = 0"/>
					<xs:assert test="count(//Lease[propertyManager]) = 0"/>
					<xs:assert test="count(//Lease[courtage]) = 0"/>
					<xs:assert test="count(//Lease[openItems]) = 0"/>
					<xs:assert test="count(//Lease[collectiveObjectIdSender]) = 0"/>
					<xs:assert test="count(//Lease[turnoverAdjType]) = 0"/>
					<xs:assert test="count(//Lease[turnoverRent]) = 0"/>
					<xs:assert test="count(//Lease[turnoverRentCap]) = 0"/>
					<xs:assert test="count(//Lease[turnoverSortiment]) = 0"/>
					<xs:assert test="count(//Lease[turnoverMinimum]) = 0"/>
					<xs:assert test="count(//Lease[turnoverReportingInterval]) = 0"/>
					<xs:assert test="count(//Lease[turnoverCertificate]) = 0"/>
					<xs:assert test="count(//Lease[contractCompletionDate]) = 0"/>
					<xs:assert test="count(//Lease[paymentPattern]) = 0"/>
					<xs:assert test="count(//Term[@objectIdSender]) = count(//Term)"/>
					<xs:assert test="count(//Term[rentIncreaseType]) = count(//Term)"/>
					<xs:assert test="count(//Term[baseIndex]) = count(//Term)"/>
					<xs:assert test="count(//Term[occupancyState]) = count(//Term)"/>
					<xs:assert test="count(//Term[payment]) = count(//Term)"/>
					<xs:assert test="count(//Term[endRentConcession]) = count(//Term)"/>
					<xs:assert test="count(//Term[terminated]) = count(//Term)"/>
					<xs:assert test="count(//Term[validFrom]) = count(//Term)"/>
					<xs:assert test="count(//Term[conditionAmount]) = count(//Term)"/>
					<xs:assert test="count(//Term[indexCountry]) = count(//Term)"/>
					<xs:assert test="count(//Term[vacancyDuration]) = count(//Term)"/>
					<xs:assert test="count(//Term[indexAdjustmentValueType]) = count(//Term)"/>
					<xs:assert test="count(//Term[rentAdjustmentFrequence]) = count(//Term)"/>
					<xs:assert test="count(//Term[indexMinimumAdjustmentInPercent]) = count(//Term)"/>
					<xs:assert test="count(//Term[indexMinimumAdjustmentInPoints]) = count(//Term)"/>
					<xs:assert test="count(//Term[contractOption]) = count(//Term)"/>
					<xs:assert test="count(//Term[currency]) = count(//Term)"/>
					<xs:assert test="count(//Term[absoluteAmount]) = 0"/>
					<xs:assert test="count(//Term[depositIncreaseType]) = 0"/>
					<xs:assert test="count(//Term[interiorQuality]) = 0"/>
					<xs:assert test="count(//Term[freeFrom]) = 0"/>
					<xs:assert test="count(//Term[terminationReceiptDate]) = 0"/>
					<xs:assert test="count(//Term[incomeLoss]) = 0"/>
					<xs:assert test="count(//Term[heatingCosts]) = 0"/>
					<xs:assert test="count(//Term[heatingCostsInServiceCharge]) = 0"/>
					<xs:assert test="count(//Term[depositType]) = 0"/>
					<xs:assert test="count(//Term[depositAmount]) = 0"/>
					<xs:assert test="count(//Term[depositPayed]) = 0"/>
					<xs:assert test="count(//Term[useType]) = 0"/>
					<xs:assert test="count(//Term[optRate]) = 0"/>
					<xs:assert test="count(//Term[parkingSpaceCosts]) = 0"/>
					<xs:assert test="count(//Term[turnoverAdjType]) = 0"/>
					<xs:assert test="count(//Term[turnoverRent]) = 0"/>
					<xs:assert test="count(//Term[turnoverRentCap]) = 0"/>
					<xs:assert test="count(//Term[turnoverSortiment]) = 0"/>
					<xs:assert test="count(//Term[turnoverMinimum]) = 0"/>
					<xs:assert test="count(//Term[turnoverReportingInterval]) = 0"/>
					<xs:assert test="count(//Term[turnoverCertificate]) = 0"/>
					<xs:assert test="count(//Term[contractCompletionDate]) = 0"/>
					<xs:assert test="count(//Term[leasedArea]) = 0"/>
					<xs:assert test="count(//Valuation[@objectIdSender]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[ratingType]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[valuationDate]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[method]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[expertName]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[co2Emission]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[discountRate]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[ownershipShare]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[ratingCategory]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[date]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[energyConsumption]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYieldOther]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYield]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYieldOffice]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYieldIndustry]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYieldTrade]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[lostSustainablyGrossYieldResidential]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[buildingInDevelopmentState]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[reason]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[validFrom]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[vacantEffectiveAreaOffice]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[vacantEffectiveAreaIndustry]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[vacantEffectiveAreaOther]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[vacantEffectiveAreaResidential]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[vacantEffectiveAreaTrade]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYield]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYieldOffice]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYieldIndustry]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYieldTrade]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYieldOther]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[sustainablyGrossYieldResidential]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveAreaOffice]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveAreaIndustry]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveAreaTrade]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveAreaOther]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveAreaResidential]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[effectiveArea]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation/energyRating[primaryEnergyDemand]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[internalValuation]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[fairValue]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[grossFairValue]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[contractRentDebit]) = count(//Valuation)"/>
					<xs:assert test="count(//Valuation[currency]) = count(//Valuation)"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
</xs:schema>
