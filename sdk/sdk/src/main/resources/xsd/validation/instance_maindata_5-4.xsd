<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="types_file.xsd"/>
	<xs:element name="data">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="Data">
					<xs:assert test="count(/data/LIST_OF_PROP) = 1"/>
					<xs:assert test="count(/data/LIST_OF_COM)  = 0"/>
					<xs:assert test="count(/data/LIST_OF_ACC)  = 0"/>
					<xs:assert test="count(//VAL)   >= count(//PROP)"/>
					<xs:assert test="count(//PROP)  >= 0"/>
					<xs:assert test="count(//BUILD) >= 0"/>
					<xs:assert test="count(//LEASE) >= 0"/>
					<xs:assert test="count(//UNIT)  >= 0"/>
					<xs:assert test="count(//VAL)   >= 0"/>
					<xs:assert test="count(//ACC)   = 0"/>
					<xs:assert test="count(//BOOK)  = 0"/>
					<xs:assert test="count(//COM)   = 0"/>
					<xs:assert test="count(//LAND)  = 0"/>
					<xs:assert test="count(//LOAN)  = 0"/>
					<xs:assert test="count(//PROJ)  = 0"/>
					<xs:assert test="count(//REC)   = 0"/>
					<xs:assert test="count(//CON)  = 0"/>
					<xs:assert test="count(//TERM)  = 0"/>
					<xs:assert test="count(//PROP[@objectIdSender]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseDate]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[numberOfRooms]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[ownershipType]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[operatingCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseGrossPrice]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[assetValue]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[constructionDate]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[monumentProtectionCategory]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[ownerOccupation]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[ownershipShare]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[groundRent]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[areaType]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[areaMeasurement]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[totalGrossCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[totalNetCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[totalApportionableCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseTransferTax]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[saleTransferTax]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[validFrom]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[useTypePrimary]) = count(//PROP)"/>
					<xs:assert test="count(//PROP/address[housenumber]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[ipdObjectId]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[ipdPortfolioId]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[retailLocation]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[maintenanceCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[capitalIncome]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[airconditioning]) = count(//PROP)"/>
					<xs:assert test="count(//PROP/address[country]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[vacancyOperatingCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseBrokerage]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[saleBrokerage]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[marketRentalValue]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[netIncome]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[rentalIncomeMain]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseNetPrice]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[protfolioType]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[portfolioPartName]) = count(//PROP)"/>
					<xs:assert test="count(//PROP/address[zip]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseLegalFees]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[purchaseAdditionalCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[otherCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[rentalIncomeAdditional]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[saleAdditionalCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP/address[city]) = count(//PROP)"/>
					<xs:assert test="count(//PROP/address[street]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[partialPurchase]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[partialSales]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[saleDate]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[fairValue]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[leasedArea]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[administrationCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[valueIncreasingReconstructCosts]) = count(//PROP)"/>
					<xs:assert test="count(//PROP[currency]) = count(//PROP)"/>
                    <xs:assert test="not(exists(//PROP/purchaseGrossPrice)) or count(//PROP) = count(//PROP[purchaseGrossPrice = purchaseNetPrice - purchaseTransferTax - purchaseLegalFees - purchaseBrokerage - purchaseAdditionalCosts])"/>
                    <xs:assert test="not(exists(//PROP/saleGrossPrice)) or count(//PROP) = count(//PROP[saleGrossPrice = saleNetPrice - saleTransferTax - saleBrokerage - saleAdditionalCosts])"/>
					<xs:assert test="count(//PROP[operatingCostsSettled]) = 0"/>
					<xs:assert test="count(//PROP[archValidFrom]) = 0"/>
					<xs:assert test="count(//PROP[archValidTo]) = 0"/>
					<xs:assert test="count(//PROP/address[isPublic]) = 0"/>
					<xs:assert test="count(//PROP[assetAccountType]) = 0"/>
					<xs:assert test="count(//PROP[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//PROP[numberOfCanteen]) = 0"/>
					<xs:assert test="count(//PROP[elevator]) = 0"/>
					<xs:assert test="count(//PROP[interiorQuality]) = 0"/>
					<xs:assert test="count(//PROP[balcony]) = 0"/>
					<xs:assert test="count(//PROP[barrierfree]) = 0"/>
					<xs:assert test="count(//PROP[lanCables]) = 0"/>
					<xs:assert test="count(//PROP/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//PROP[distanceToRailStation]) = 0"/>
					<xs:assert test="count(//PROP[distanceToAirport]) = 0"/>
					<xs:assert test="count(//PROP[distanceToPublicTransport]) = 0"/>
					<xs:assert test="count(//PROP[distanceToHighway]) = 0"/>
					<xs:assert test="count(//PROP[titleOfExposee]) = 0"/>
					<xs:assert test="count(//PROP[facilityManager]) = 0"/>
					<xs:assert test="count(//PROP/address[latitude]) = 0"/>
					<xs:assert test="count(//PROP/address[longitude]) = 0"/>
					<xs:assert test="count(//PROP[plotArea]) = 0"/>
					<xs:assert test="count(//PROP[locationClassificationType]) = 0"/>
					<xs:assert test="count(//PROP[note]) = 0"/>
					<xs:assert test="count(//PROP[propertyManager]) = 0"/>
					<xs:assert test="count(//PROP[courtage]) = 0"/>
					<xs:assert test="count(//BUILD[@objectIdSender]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[purchaseDate]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[numberOfParkingSpaces]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[numberOfRooms]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[constructionDate]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[monumentProtectionCategory]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[ownerOccupation]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[ownershipShare]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[areaType]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[areaMeasurement]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[validFrom]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[useTypePrimary]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD/address[housenumber]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[airconditioning]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[usableArea]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD/address[zip]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD/address[city]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD/address[street]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[economicConstructionDate]) = count(//BUILD)"/>
					<xs:assert test="count(//BUILD[archValidFrom]) = 0"/>
					<xs:assert test="count(//BUILD[archValidTo]) = 0"/>
					<xs:assert test="count(//BUILD/address[isPublic]) = 0"/>
					<xs:assert test="count(//BUILD[assetAccountType]) = 0"/>
					<xs:assert test="count(//BUILD[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//BUILD[numberOfBedrooms]) = 0"/>
					<xs:assert test="count(//BUILD[numberOfCanteen]) = 0"/>
					<xs:assert test="count(//BUILD[elevator]) = 0"/>
					<xs:assert test="count(//BUILD[interiorQuality]) = 0"/>
					<xs:assert test="count(//BUILD[balcony]) = 0"/>
					<xs:assert test="count(//BUILD[barrierfree]) = 0"/>
					<xs:assert test="count(//BUILD[energySource]) = 0"/>
					<xs:assert test="count(//BUILD[lanCables]) = 0"/>
					<xs:assert test="count(//BUILD[floorload]) = 0"/>
					<xs:assert test="count(//BUILD/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//BUILD[numberOfFloors]) = 0"/>
					<xs:assert test="count(//BUILD/address[latitude]) = 0"/>
					<xs:assert test="count(//BUILD/address[longitude]) = 0"/>
					<xs:assert test="count(//BUILD[guestToilet]) = 0"/>
					<xs:assert test="count(//BUILD[cubature]) = 0"/>
					<xs:assert test="count(//BUILD[propertyManager]) = 0"/>
					<xs:assert test="count(//BUILD[courtage]) = 0"/>
					<xs:assert test="count(//BUILD[ramp]) = 0"/>
					<xs:assert test="count(//BUILD[highVoltage]) = 0"/>
					<xs:assert test="count(//UNIT[@objectIdSender]) = count(//UNIT)"/>
					<xs:assert test="count(//UNIT[numberOfParkingSpaces]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[numberOfRooms]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT/energyRating[date]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT/energyRating[energyConsumption]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[areaType]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[areaMeasurement]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[validFrom]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[useType]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[lettableArea]) = count(//PROP/LIST_OF_UNIT/UNIT)"/>
					<xs:assert test="count(//UNIT[archValidFrom]) = 0"/>
					<xs:assert test="count(//UNIT[archValidTo]) = 0"/>
					<xs:assert test="count(//UNIT[summerResidencePractical]) = 0"/>
					<xs:assert test="count(//UNIT[numberOfBathrooms]) = 0"/>
					<xs:assert test="count(//UNIT[numberOfBedrooms]) = 0"/>
					<xs:assert test="count(//UNIT[interiorQuality]) = 0"/>
					<xs:assert test="count(//UNIT[balcony]) = 0"/>
					<xs:assert test="count(//UNIT[barrierfree]) = 0"/>
					<xs:assert test="count(//UNIT[lanCables]) = 0"/>
					<xs:assert test="count(//UNIT[hasBuiltinKitchen]) = 0"/>
					<xs:assert test="count(//UNIT[isLodgerFlat]) = 0"/>
					<xs:assert test="count(//UNIT/energyRating[energyEfficiencyClass]) = 0"/>
					<xs:assert test="count(//UNIT[localReferenceRent]) = 0"/>
					<xs:assert test="count(//UNIT/address[floor]) = 0"/>
					<xs:assert test="count(//UNIT[titleOfExposee]) = 0"/>
					<xs:assert test="count(//UNIT[garden]) = 0"/>
					<xs:assert test="count(//UNIT[guestToilet]) = 0"/>
					<xs:assert test="count(//UNIT[hallHeight]) = 0"/>
					<xs:assert test="count(//UNIT[autoLift]) = 0"/>
					<xs:assert test="count(//UNIT/address[floorLocation]) = 0"/>
					<xs:assert test="count(//UNIT[vacancyReason]) = 0"/>
					<xs:assert test="count(//UNIT[hasFurniture]) = 0"/>
					<xs:assert test="count(//UNIT[nonSmoker]) = 0"/>
					<xs:assert test="count(//UNIT[useTypeCustomer]) = 0"/>
					<xs:assert test="count(//UNIT[propertyManager]) = 0"/>
					<xs:assert test="count(//UNIT[courtage]) = 0"/>
					<xs:assert test="count(//UNIT[certificateOfEligibility]) = 0"/>
					<xs:assert test="count(//UNIT[apartmentType]) = 0"/>
					<xs:assert test="count(//LEASE[@objectIdSender]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[payment]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[terminated]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[validFrom]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[leaseBeginDate]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[leaseEndDate]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[option]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[currency]) = count(//LEASE)"/>
					<xs:assert test="count(//LEASE[operatingCostsSettled]) = 0"/>
					<xs:assert test="count(//LEASE[acceptedTerminationtDate]) = 0"/>
					<xs:assert test="count(//LEASE[depositIncreaseType]) = 0"/>
					<xs:assert test="count(//LEASE[badDebt]) = 0"/>
					<xs:assert test="count(//LEASE[operatingCostPrepayment]) = 0"/>
					<xs:assert test="count(//LEASE[freeFrom]) = 0"/>
					<xs:assert test="count(//LEASE[terminationReceiptDate]) = 0"/>
					<xs:assert test="count(//LEASE[debitor]) = 0"/>
					<xs:assert test="count(//LEASE[debitorId]) = 0"/>
					<xs:assert test="count(//LEASE[leaseContractType]) = 0"/>
					<xs:assert test="count(//LEASE[petsAllowed]) = 0"/>
					<xs:assert test="count(//LEASE[tenancy]) = 0"/>
					<xs:assert test="count(//LEASE[heatingCosts]) = 0"/>
					<xs:assert test="count(//LEASE[depositType]) = 0"/>
					<xs:assert test="count(//LEASE[depositAmount]) = 0"/>
					<xs:assert test="count(//LEASE[depositPayed]) = 0"/>
					<xs:assert test="count(//LEASE[dunningIndicator]) = 0"/>
					<xs:assert test="count(//LEASE[nation]) = 0"/>
					<xs:assert test="count(//LEASE[parkingSpaceCosts]) = 0"/>
					<xs:assert test="count(//LEASE[propertyManager]) = 0"/>
					<xs:assert test="count(//LEASE[courtage]) = 0"/>
					<xs:assert test="count(//LEASE[openItems]) = 0"/>
					<xs:assert test="count(//LEASE[collectiveObjectIdSender]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverAdjType]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverRent]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverRentCap]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverSortiment]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverMinimum]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverReportingInterval]) = 0"/>
					<xs:assert test="count(//LEASE[turnoverCertificate]) = 0"/>
					<xs:assert test="count(//LEASE[contractCompletionDate]) = 0"/>
					<xs:assert test="count(//LEASE[paymentPattern]) = 0"/>
					<xs:assert test="count(//TERM[@objectIdSender]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[rentIncreaseType]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[baseIndex]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[occupancyState]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[payment]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[endRentConcession]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[terminated]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[validFrom]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[conditionAmount]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[indexCountry]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[vacancyDuration]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[indexAdjustmentValueType]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[rentAdjustmentFrequence]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[indexMinimumAdjustmentInPercent]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[indexMinimumAdjustmentInPoints]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[contractOption]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[currency]) = count(//TERM)"/>
					<xs:assert test="count(//TERM[absoluteAmount]) = 0"/>
					<xs:assert test="count(//TERM[depositIncreaseType]) = 0"/>
					<xs:assert test="count(//TERM[interiorQuality]) = 0"/>
					<xs:assert test="count(//TERM[freeFrom]) = 0"/>
					<xs:assert test="count(//TERM[terminationReceiptDate]) = 0"/>
					<xs:assert test="count(//TERM[incomeLoss]) = 0"/>
					<xs:assert test="count(//TERM[heatingCosts]) = 0"/>
					<xs:assert test="count(//TERM[heatingCostsInServiceCharge]) = 0"/>
					<xs:assert test="count(//TERM[depositType]) = 0"/>
					<xs:assert test="count(//TERM[depositAmount]) = 0"/>
					<xs:assert test="count(//TERM[depositPayed]) = 0"/>
					<xs:assert test="count(//TERM[useType]) = 0"/>
					<xs:assert test="count(//TERM[optRate]) = 0"/>
					<xs:assert test="count(//TERM[parkingSpaceCosts]) = 0"/>
					<xs:assert test="count(//TERM[turnoverAdjType]) = 0"/>
					<xs:assert test="count(//TERM[turnoverRent]) = 0"/>
					<xs:assert test="count(//TERM[turnoverRentCap]) = 0"/>
					<xs:assert test="count(//TERM[turnoverSortiment]) = 0"/>
					<xs:assert test="count(//TERM[turnoverMinimum]) = 0"/>
					<xs:assert test="count(//TERM[turnoverReportingInterval]) = 0"/>
					<xs:assert test="count(//TERM[turnoverCertificate]) = 0"/>
					<xs:assert test="count(//TERM[contractCompletionDate]) = 0"/>
					<xs:assert test="count(//TERM[leasedArea]) = 0"/>
					<xs:assert test="count(//VAL[@objectIdSender]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[ratingType]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[valuationDate]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[method]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[expertName]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[co2Emission]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[discountRate]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[ownershipShare]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[ratingCategory]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[date]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[energyConsumption]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYieldOther]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYield]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYieldOffice]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYieldIndustry]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYieldTrade]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[lostSustainablyGrossYieldResidential]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[buildingInDevelopmentState]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[reason]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[validFrom]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[vacantEffectiveAreaOffice]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[vacantEffectiveAreaIndustry]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[vacantEffectiveAreaOther]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[vacantEffectiveAreaResidential]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[vacantEffectiveAreaTrade]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYield]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYieldOffice]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYieldIndustry]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYieldTrade]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYieldOther]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[sustainablyGrossYieldResidential]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveAreaOffice]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveAreaIndustry]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveAreaTrade]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveAreaOther]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveAreaResidential]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[effectiveArea]) = count(//VAL)"/>
					<xs:assert test="count(//VAL/energyRating[primaryEnergyDemand]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[internalValuation]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[fairValue]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[grossFairValue]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[contractRentDebit]) = count(//VAL)"/>
					<xs:assert test="count(//VAL[currency]) = count(//VAL)"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
</xs:schema>
